# O programa deve aceitar os gates AND, NAND, OR, NOR, NOT, XOR, NXOR.
def operacoes(tipo_operacao, valor):
    if tipo_operacao == "and":
        return 1 if all(valor) else 0
    elif tipo_operacao == "nand":
        return 1 - (1 if all(valor) else 0)
    elif tipo_operacao == "or":
        return valor[0] | valor[1]
    elif tipo_operacao == "nor":
        return 1 - (valor[0] | valor[1])
    elif tipo_operacao == "not":
        return 1 - valor[0]
    elif tipo_operacao == "xor":
        return valor[0] ^ valor[1]
    elif tipo_operacao == "nxor":
        return 1 - (valor[0] ^ valor[1])
    else:
        raise ValueError(f"Operação inválida: {tipo_operacao}")


# O arquivo texto de entrada deve conter a descrição de um circuito digital combinacional (combinaC'C#o de portas), no formato descrito e exemplificado no anexo
def ler_arquivo_entrada():
    arquivo_circuito = {}
    with open("circuito_teste.txt", "r") as arquivo_entrada:
        for linha in arquivo_entrada:
            # Formatação das informações que tem que pegar
            tipo, valor = linha.split(":", 1)
            tipo, valor = tipo.strip(), valor.strip()
            if valor.startswith("[") and valor.endswith("]"):
                valor = [
                    item.strip().strip("'").strip('"')
                    for item in valor[1:-1].split(",")
                ]

            arquivo_circuito[tipo] = valor
    return arquivo_circuito


def calcular_operacoes(arquivo_circuitos, var_operacoes):

    resultados_operacoes = {
        entrada: valor
        for entrada, valor in zip(arquivo_circuitos["entradas"], var_operacoes)
    }
    gates_imcompletos = set(arquivo_circuitos["gates"])

    while gates_imcompletos:
        for gate in list(gates_imcompletos):
            info_gate = arquivo_circuitos[gate]
            tipo = info_gate[0].lower()  
            saidas_esperadas = [
                item for item in info_gate[1:] if item not in resultados_operacoes
            ]

            if len(saidas_esperadas) != 1:
                continue

            entrada_ids = [e for e in info_gate[1:] if e != saidas_esperadas[0]]

            if all(entrada in resultados_operacoes for entrada in entrada_ids):
                entradas = [resultados_operacoes[entrada] for entrada in entrada_ids]
                resultados_operacoes[saidas_esperadas[0]] = operacoes(tipo, entradas)
                gates_imcompletos.remove(gate)

        if not gates_imcompletos:
            break

    return [resultados_operacoes[saida] for saida in arquivo_circuitos["saidas"]]



# O arquivo texto gerado como saída deve apresentar o nome do circuito e a Tabela Verdade (TV) do circuito combinatC3rio, com uma linha da TV (entrada e saC-da) por linha de texto
def combinacoes_tabela_verdade(num_entradas):
    return [
        [(i >> j) & 1 for j in range(num_entradas - 1, -1, -1)]
        for i in range(2 ** num_entradas)
    ]


def gerar_tabela_verdade():
    arquivo_circuitos = ler_arquivo_entrada()
    entradas = sorted(arquivo_circuitos["entradas"])
    # FormataC'C#o da exibição da tabela
    saida_labels = arquivo_circuitos["saidas"]
    header = " | ".join(entradas) + " || " + " | ".join(saida_labels) + "\n" 
    separador = "-" * len(header) + "\n"
    tabela = header + separador

    for combinacao in combinacoes_tabela_verdade(len(entradas)):
        resultados = calcular_operacoes(arquivo_circuitos, combinacao)
        linha = " | ".join(map(str, combinacao)) + " || " + " | ".join(map(str, resultados)) + "\n"
        tabela += linha

    return tabela


# Criação do arquivo de saida da tabela verdade
def escrever_arquivo_saida():
    with open("arquivo_circuito_saida.txt", "w") as arquivo_saida:
        arquivo_saida.write("Tabela Verdade das Operações\n")
        tabela_verdade_saida = gerar_tabela_verdade()
        arquivo_saida.write(tabela_verdade_saida)


escrever_arquivo_saida()
